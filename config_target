#!/bin/bash
#Declaration of States
ADD_OPTION="-a"
REMOVE_OPTION="-r"
LIST_OPTION="-l"
HELP_OPTION="-h"
TRUE=1
FALSE=0
IS_REMOVED=$FALSE
IS_ADDED=$FALSE
BEFORE_SCRAPE=0
DURING_SCRAPE=1
DURING_TARGET=2
DURING_JOB=3
STATE=$BEFORE_SCRAPE
OPTION=""
PROM_DIR=""
IP1=""
IP2=""
JOB_NAME=""
HELP_MSG="use $HELP_OPTION option to get a guide on how to use config_target"
TARGET=""
STATE=$BEFORE_SCRAPE
CONTENT=""
JOB_CONTENT=""
JOB_SPACES=""
NUM_SPACES=0
LIST=""

#Helper functions 
help() {
 echo ""
 echo ""
 curl https://raw.githubusercontent.com/burningknight7/temp/master/config_target_man.txt
}

write_job_content(){

 JOB_CONTENT=$JOB_CONTENT$JOB_SPACES"- job_name: '$JOB_NAME'\n\n"
 JOB_CONTENT=$JOB_CONTENT$JOB_SPACES"  metrics_path: '/metrics'\n\n"
 JOB_CONTENT=$JOB_CONTENT$JOB_SPACES"  static_configs:\n"
 JOB_CONTENT=$JOB_CONTENT$JOB_SPACES"  $TARGET\n\n"

}

#######MAIN#######

if [ $# -eq 0 ]; then
	echo "No arguments passed, "$HELP_MSG
	exit
elif [ $# -gt 0 ]; then
	OPTION="$1"
	if [ $1 = "$HELP_OPTION" ]; then
		help
		exit
	elif [ $1 = "$ADD_OPTION" ]; then
		if [ ! -f "$2" ]; then
			echo "Enter a prometheus.yml file that exists"
			exit
		fi
		if [[ ! $3 =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
			echo "Enter a valid server name"
			exit
		fi
		if [[ ! $4 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
			echo "Enter a valid ip address"
			exit
		fi
		PROM_DIR="$2"
		IP1="$4"
		TARGET="- targets: ['$IP1:9100','$IP1:7676','$IP1:9256','$IP1:9399','$IP1:9104'"
		if [ $# -eq 5 ] && [[ $4 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
			IP2="$5"
			TARGET=$TARGET",'$IP2:9100','$IP2:9256','$IP2:7676','$IP2:9399','$IP2:9104']"
		else
			TARGET=$TARGET"]"
		fi
		JOB_NAME="$3"
	elif [ $1 = "$REMOVE_OPTION" ]; then
		if [ ! -f "$2" ]; then
			echo "Enter a prometheus.yml file that exists"
			exit
		fi
		PROM_DIR="$2"
		JOB_NAME="$3"
	elif [ $1 = "$LIST_OPTION" ]; then
		if [ ! -f "$2" ]; then
			echo "Enter a prometheus.yml file that exists"
			exit
		fi
		PROM_DIR="$2"
	else
		echo "Wrong arguemnt passed, "$HELP_MSG
		exit
	fi
fi	 

while IFS= read -r line
do

if [ $STATE -eq $BEFORE_SCRAPE ]; then
	if [[ $line == *"scrape_configs:"* ]]; then
		NUM_SPACES=`expr index "$line" "s"`
		if [ $NUM_SPACES -lt 2 ]; then
			NUM_SPACES=3
		fi
		NUM_SPACES=$((NUM_SPACES - 1))
		JOB_SPACES=""
		for i in $( seq 1 $NUM_SPACES)
		do
			JOB_SPACES=$JOB_SPACES" "
		done
		STATE=$DURING_SCRAPE
	fi
	CONTENT=$CONTENT$line"\n"
elif [ $STATE -eq $DURING_SCRAPE ]; then
	if [ "$OPTION" = "$ADD_OPTION" ]; then
		if [[ $line =~ ^[[:space:]]+-[[:space:]]+[a-zA-Z0-9_]+:.*$ ]]; then
			NUM_SPACES=`expr index "$line" "-"`
			NUM_SPACES=$((NUM_SPACES - 1))
			JOB_SPACES=""
			for i in $( seq 1 $NUM_SPACES)
			do
				JOB_SPACES=$JOB_SPACES" "
			done
			JOB_CONTENT=""
			write_job_content
			CONTENT=$CONTENT$JOB_CONTENT$line"\n"			
			STATE=$BEFORE_SCRAPE
			IS_ADDED=$TRUE
			echo "Added the Target Successfully"
			
		elif [[ $line =~ ^[[:space:]]{0,$NUM_SPACES}[a-zA-Z0-9_].*$ ]]; then
			if [ $IS_ADDED -eq $FALSE ]; then
				JOB_CONTENT=""
				JOB_SPACES=$JOB_SPACES"  "
				write_job_content
				CONTENT=$CONTENT$JOB_CONTENT$line"\n"
				IS_ADDED=$TRUE
				echo "Added Target Successfully"
				
				STATE=$BEFORE_SCRAPE
			else
				CONTENT=$CONTENT$line"\n"
			fi
		else
			CONTENT=$CONTENT$line"\n"
		fi
	elif [ "$OPTION" = "$REMOVE_OPTION" ]; then
		if [[ $line =~ ^[[:space:]]+-[[:space:]]+[a-zA-Z0-9_]+:.*$ ]]; then
			if [[ $line == *"job_name"* ]] && [[ $line == *"$JOB_NAME"* ]]; then
				IS_REMOVED=$TRUE
				echo "Removed Target Successfully"
			fi
			NUM_SPACES=`expr index "$line" "-"`
			NUM_SPACES=$((NUM_SPACES - 1))
			STATE=$DURING_JOB
			JOB_CONTENT=$JOB_CONTENT$line"\n"
		else
			CONTENT=$CONTENT$line"\n"
		fi
	elif [ "$OPTION" = "$LIST_OPTION" ]; then
		if [[ $line =~ ^[[:space:]-]+job_name:[[:space:]]+[\'\"].*[\'\"].*$ ]]; then	
			echo $line
		elif [[ $line =~ ^[[:space:]-]+targets:.*$ ]]; then
			echo $line
			if [[ ! $line == *"]"* ]]; then	
				STATE=$DURING_TARGET
			else
				echo ""
			fi
		fi
	fi
elif [ $STATE -eq $DURING_TARGET ]; then
	if [ $OPTION = "$LIST_OPTION" ]; then
		if [[ $line == *"]"* ]]; then
			echo $line
			echo ""
			STATE=$DURING_SCRAPE
		else 
			echo $line
		fi
	fi

elif [ $STATE -eq $DURING_JOB ]; then
	if [ $OPTION = "$REMOVE_OPTION" ]; then
		LESS_SPACES=$(($NUM_SPACES - 1))
		if [[ $line =~ ^[[:space:]]{0,$LESS_SPACES}[a-zA-Z0-9_-]+:.* ]]; then
			if [ $IS_REMOVED -eq $FALSE ]; then
				CONTENT=$CONTENT$JOB_CONTENT$line"\n"
			else
				CONTENT=$CONTENT$line"\n"
			fi
			STATE=$BEFORE_SCRAPE
		
		else
			if [[ $line =~ ^[[:space:]]{$NUM_SPACES}-.*$  ]]; then
				if [ $IS_REMOVED -eq $FALSE ]; then
					CONTENT=$CONTENT$JOB_CONTENT
				fi
				IS_REMOVED=$FALSE
				if [[ $line == *"job_name:"* ]] && [[ $line == *"$JOB_NAME"* ]]; then
					IS_REMOVED=$TRUE
					echo "Removed Target Successfully"
				fi
				JOB_CONTENT=$line"\n"
			elif [[ $line =~ ^[[:space:]]+job_name:[[:space:]]+[\'\"]$JOB_NAME[\'\"].*$ ]]; then
				IS_REMOVED=$TRUE
				echo "Removed Target Successfully"
				JOB_CONTENT=$JOB_CONTENT$line"\n"
			else 
				JOB_CONTENT=$JOB_CONTENT$line"\n"
			fi
		fi
	fi
			
fi

done < "$PROM_DIR"

if [ $STATE -eq $DURING_JOB ]; then
	if [ "$OPTION" = "$REMOVE_OPTION" ]; then
		if [ $IS_REMOVED -eq $FALSE ]; then
			CONTENT=$CONTENT$JOB_CONTENT
		fi
	fi
fi

if [ $STATE -eq $DURING_SCRAPE ]; then
	if [ "$OPTION" = "$ADD_OPTION" ]; then
		if [ $IS_ADDED -eq $FALSE ]; then
			JOB_CONTENT=""
			write_job_content
			CONTENT=$CONTENT$JOB_CONTENT"\n"
			IS_ADDED=$TRUE
			echo "Added Target Successfully"
		fi
	fi
fi

if [ "$OPTION" = "$ADD_OPTION" ] || [ "$OPTION" = "$REMOVE_OPTION" ]; then
	printf "$CONTENT" > "$PROM_DIR"
fi 
